
service: vautomator-serverless
frameworkVersion: ">=1.2.0 <2.0.0"

provider:
  name: aws
  runtime: python3.6
  region: us-west-2
  # To use the bucket specified, we will need permissions
  iamRoleStatements:
   - Effect: "Allow"
     Action:
       - "s3:PutObject"
       - "s3:PutObjectAcl"
     Resource: 
      Fn::Join:
        - ""
        - - Fn::GetAtt:
            - S3BucketResults
            - Arn
          - "/*"
   - Effect: "Allow"
     Action:
      - "sqs:SendMessage"
     Resource:
      Fn::GetAtt: [ SQSQueue, Arn ]
  environment:
    HTTPOBS_API_URL: 'https://http-observatory.security.mozilla.org/api/v1'

functions:
  cronObservatoryScan:
    handler: handler.runScheduledObservatoryScan
    events:
      # Invoke Lambda function every 5 mins
      - schedule: rate(5 minutes)
      - s3:
        bucket: ${self:custom.cfg.s3BucketName}
        event: s3:ObjectCreated:*
  ObservatoryScanQueue:
    handler: handler.runObservatoryScanFromQ
    events:
      - sqs:
          arn:
            Fn::GetAtt: [ SQSQueue, Arn ]
  ingest:
    handler: handler.putInQueue
    environment:
      SQS_URL:
        Ref: SQSQueue

plugins:
  - serverless-python-requirements

# We will need a bucket to store the results of a scheduled scan
resources:
  Resources:
    S3BucketResults:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.cfg.s3BucketName}
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.cfg.vautomatorQ}

custom:
  cfg:
    s3BucketName: "vautomator-results"
    vautomatorQ: "vautomator-SQS"
  pythonRequirements:
    dockerizePip: non-linux
